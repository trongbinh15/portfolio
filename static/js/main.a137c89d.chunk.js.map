{"version":3,"sources":["components/LazyLoadImg/styles.js","components/LazyLoadImg/index.js","App.js","serviceWorker.js","index.js"],"names":["MainWrapper","styled","div","LazyloadImg","url","throttle","height","src","App","style","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kfAEA,IAaeA,E,KAbKC,EAAOC,IAAV,KCaFC,MAVf,YAA+B,IAARC,EAAO,EAAPA,IACrB,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAUC,SAAU,IAAMC,OAAQ,KAChC,yBAAKC,IAAKH,OCgDHI,MArDf,WACE,OACE,yBAAKC,MAAO,CAAEC,UAAW,WACvB,6BACE,kBAAC,EAAD,CAAaN,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,6EAEnB,6BACE,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,6EAEnB,6BACE,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,6EAEnB,6BACE,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,6EAEnB,6BACE,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,6EAEnB,6BACE,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,6EAEnB,6BACE,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,6EAEnB,6BACE,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,6EAEnB,6BACE,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,4EACjB,kBAAC,EAAD,CAAaA,IAAI,+ECtCLO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a137c89d.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst MainWrapper = styled.div`\r\n  padding-top: 4rem;\r\n  display: inline-block;\r\n\r\n  .lazyload-wrapper {\r\n    img {\r\n      border-radius: 20px;\r\n      width: 310px;\r\n      padding: 5px;\r\n    }\r\n  }\r\n`\r\n\r\nexport default MainWrapper","import React from 'react'\r\nimport Lazyload from 'react-lazyload'\r\n\r\nimport MainWrapper from './styles'\r\n\r\nfunction LazyloadImg({ url }) {\r\n  return (\r\n    <MainWrapper>\r\n      <Lazyload throttle={1000} height={300}>\r\n        <img src={url} />\r\n      </Lazyload>\r\n    </MainWrapper>\r\n  )\r\n}\r\n\r\nexport default LazyloadImg","import React from 'react';\r\nimport './App.css';\r\nimport LazyloadImg from './components/LazyLoadImg'\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div>\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/9f/ef/bf/9fefbf39bf0a8cd5b5c8ea6e92ded682.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/18/63/45/1863456bc4465dae29ea3705b2888109.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/cc/ef/54/ccef547f152016208ffbe0904ac3e51d.jpg\" />\r\n      </div>\r\n      <div>\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/bf/35/9b/bf359bc230a45c85776fe5b2bfb56ac5.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/d1/c8/9c/d1c89c91c2de885410f447f2b6fe457b.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/32/e5/86/32e586ecba0447b611360a56b79b6dd1.jpg\" />\r\n      </div>\r\n      <div>\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/ce/45/e3/ce45e3819f35267f5d03a2ea58f87440.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/a7/4a/e4/a74ae4958184fda7daf1f6ef9f0062aa.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/04/23/4e/04234eb5a503f5f0aed0330b44afac67.jpg\" />\r\n      </div>\r\n      <div>\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/be/4a/24/be4a24321cabff6a21fc1492b2ee9c0f.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/07/ec/b0/07ecb04c2934e82684574b1a27b0d72d.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/09/56/28/095628641cf147f9afcb33d155cb49b4.jpg\" />\r\n      </div>\r\n      <div>\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/2c/22/96/2c22968ecc5c642c570675176ae3529b.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/d9/25/e7/d925e7d926fb8427556d84fbfc409930.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/8c/b0/16/8cb016fef6275475a88e80f0296e2f01.jpg\" />\r\n      </div>\r\n      <div>\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/72/cb/d7/72cbd72b1930f38aa0ee8f701a70b70c.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/ea/f3/16/eaf316b84a928a8feb3e5765eff81e84.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/00/29/ce/0029ce0e3f6e3c79a331aefbc5420e42.jpg\" />\r\n      </div>\r\n      <div>\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/47/15/81/47158182c2f02503088171b44dd3ac12.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/7f/5b/08/7f5b0848cd6d6886d0c9206c449fba42.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/bb/fb/7a/bbfb7afc71b9a3348cb121074c5b0771.jpg\" />\r\n      </div>\r\n      <div>\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/c6/bd/c4/c6bdc46d885854e0cbb31be8318ced51.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/53/8b/ad/538badf44f9b8103b7dd447ba4c9f475.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/e9/47/90/e94790e67d26016fe8f6ce6dbd7a0d01.jpg\" />\r\n      </div>\r\n      <div>\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/05/ad/51/05ad513efa1f4851d5dcb0536fc2f488.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/c6/bd/c4/c6bdc46d885854e0cbb31be8318ced51.jpg\" />\r\n        <LazyloadImg url=\"https://i.pinimg.com/564x/53/8b/ad/538badf44f9b8103b7dd447ba4c9f475.jpg\" />\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}