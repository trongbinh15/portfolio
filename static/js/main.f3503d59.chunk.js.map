{"version":3,"sources":["components/nav-bar/nav-bar-styles.module.scss","components/nav-bar/nav-bar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","NavBar","useState","styled","burgerClass","setBurgerClass","className","href","onClick","e","document","querySelector","classList","toggle","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,IAAM,4BAA4B,KAAO,6BAA6B,WAAW,iCAAiC,OAAS,+BAA+B,aAAa,mCAAmC,OAAS,+BAA+B,MAAQ,8BAA8B,MAAQ,8BAA8B,MAAQ,gC,yLCmDzUC,EAjDA,WAAO,IAAD,EACqBC,mBAASC,IAAM,QADpC,mBACVC,EADU,KACGC,EADH,KAgBjB,OACI,oCACI,yBAAKC,UAAWH,IAAM,KAClB,yBAAKG,UAAWH,IAAM,MAClB,qCAEJ,wBAAIG,UAAWH,IAAO,aAClB,4BACI,uBAAGI,KAAK,SAAR,SAEJ,4BACI,uBAAGA,KAAK,UAAR,UAEJ,4BACI,uBAAGA,KAAK,gBAAR,gBAEJ,4BACI,uBAAGA,KAAK,aAAR,aAEJ,4BACI,uBAAGA,KAAK,YAAR,aAGR,yBAAKD,UAAWF,EAAaI,QAAS,SAAAC,GAAC,OAlC3CL,IAAgBD,IAAM,OACtBE,EAAe,GAAD,OAAIF,IAAM,OAAV,YAAwBA,IAAM,SAE5CE,EAAeF,IAAM,aAGbO,SAASC,cAAT,WAA2BR,IAAO,cAE1CS,UAAUC,OAAd,UAAwBV,IAAO,kBA2BnB,yBAAKG,UAAWH,IAAM,QACtB,yBAAKG,UAAWH,IAAM,QACtB,yBAAKG,UAAWH,IAAM,YC3B3BW,MAdf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,6BAASC,GAAG,SACZ,6BAASA,GAAG,UACZ,6BAASA,GAAG,gBACZ,6BAASA,GAAG,aACZ,6BAASA,GAAG,YACZ,mCCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASc,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f3503d59.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav-bar-styles_nav__U4N8B\",\"logo\":\"nav-bar-styles_logo__3szPB\",\"nav-link\":\"nav-bar-styles_nav-link__1OFhy\",\"burger\":\"nav-bar-styles_burger__2kAOk\",\"nav-active\":\"nav-bar-styles_nav-active__29aJC\",\"toggle\":\"nav-bar-styles_toggle__2g7Kl\",\"line1\":\"nav-bar-styles_line1__2lsDN\",\"line2\":\"nav-bar-styles_line2__f8XMe\",\"line3\":\"nav-bar-styles_line3__30za9\"};","import React, { useState } from 'react';\nimport styled from './nav-bar-styles.module.scss';\n\nconst NavBar = () => {\n    const [burgerClass, setBurgerClass] = useState(styled['burger']);\n\n    const toggleNavbar = (e) => {\n\n        if (burgerClass === styled['burger']) {\n            setBurgerClass(`${styled['burger']} ${styled['toggle']}`)\n        } else {\n            setBurgerClass(styled['burger']);\n        }\n\n        const nav = document.querySelector(`.${styled['nav-link']}`)\n\n        nav.classList.toggle(`${styled['nav-active']}`);\n    }\n\n    return (\n        <>\n            <div className={styled['nav']}>\n                <div className={styled['logo']}>\n                    <h4>Logo</h4>\n                </div>\n                <ul className={styled['nav-link']}>\n                    <li>\n                        <a href=\"#home\">Home</a>\n                    </li>\n                    <li>\n                        <a href=\"#about\">About</a>\n                    </li>\n                    <li>\n                        <a href=\"#experiences\">Experiences</a>\n                    </li>\n                    <li>\n                        <a href=\"#interest\">Interest</a>\n                    </li>\n                    <li>\n                        <a href=\"#contact\">Contact</a>\n                    </li>\n                </ul>\n                <div className={burgerClass} onClick={e => toggleNavbar(e)}  >\n                    <div className={styled['line1']}></div>\n                    <div className={styled['line2']}></div>\n                    <div className={styled['line3']}></div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default NavBar;","import React from 'react';\nimport './App.css';\nimport NavBar from './components/nav-bar/nav-bar';\n\nfunction App() {\n  return (\n    <>\n      <NavBar></NavBar>\n      <section id=\"home\"></section>\n      <section id=\"about\"></section>\n      <section id=\"experiences\"></section>\n      <section id=\"interest\"></section>\n      <section id=\"contact\"></section>\n      <footer></footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}