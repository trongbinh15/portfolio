{"version":3,"sources":["components/nav-bar/nav-bar-styles.module.scss","components/nav-bar/nav-bar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","NavBar","useState","styled","burgerClass","setBurgerClass","className","onClick","e","document","querySelector","classList","toggle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFACAA,EAAOC,QAAU,CAAC,IAAM,4BAA4B,KAAO,6BAA6B,WAAW,iCAAiC,OAAS,+BAA+B,aAAa,mCAAmC,OAAS,+BAA+B,MAAQ,8BAA8B,MAAQ,8BAA8B,MAAQ,gC,yLCgDzUC,EA9CA,WAAO,IAAD,EACqBC,mBAASC,IAAM,QADpC,mBACVC,EADU,KACGC,EADH,KAgBjB,OACI,oCACI,yBAAKC,UAAWH,IAAM,KAClB,yBAAKG,UAAWH,IAAM,MAClB,qCAEJ,wBAAIG,UAAWH,IAAO,aAClB,4BACI,oCAEJ,4BACI,qCAEJ,4BACI,oCAEJ,4BACI,wCAGR,yBAAKG,UAAWF,EAAaG,QAAS,SAAAC,GAAC,OA/B3CJ,IAAgBD,IAAM,OACtBE,EAAe,GAAD,OAAIF,IAAM,OAAV,YAAwBA,IAAM,SAE5CE,EAAeF,IAAM,aAGbM,SAASC,cAAT,WAA2BP,IAAO,cAE1CQ,UAAUC,OAAd,UAAwBT,IAAO,kBAwBnB,yBAAKG,UAAWH,IAAM,QACtB,yBAAKG,UAAWH,IAAM,QACtB,yBAAKG,UAAWH,IAAM,YC9B3BU,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASa,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.23783eed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"nav-bar-styles_nav__3-H-m\",\"logo\":\"nav-bar-styles_logo__14sf2\",\"nav-link\":\"nav-bar-styles_nav-link__2O8vu\",\"burger\":\"nav-bar-styles_burger__20nNg\",\"nav-active\":\"nav-bar-styles_nav-active__2tkE9\",\"toggle\":\"nav-bar-styles_toggle__2jtyI\",\"line1\":\"nav-bar-styles_line1__1IOvo\",\"line2\":\"nav-bar-styles_line2__2d6VA\",\"line3\":\"nav-bar-styles_line3__1VZOu\"};","import React, { useState } from 'react';\r\nimport styled from './nav-bar-styles.module.scss';\r\n\r\nconst NavBar = () => {\r\n    const [burgerClass, setBurgerClass] = useState(styled['burger']);\r\n\r\n    const toggleNavbar = (e) => {\r\n\r\n        if (burgerClass === styled['burger']) {\r\n            setBurgerClass(`${styled['burger']} ${styled['toggle']}`)\r\n        } else {\r\n            setBurgerClass(styled['burger']);\r\n        }\r\n\r\n        const nav = document.querySelector(`.${styled['nav-link']}`)\r\n\r\n        nav.classList.toggle(`${styled['nav-active']}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={styled['nav']}>\r\n                <div className={styled['logo']}>\r\n                    <h4>Logo</h4>\r\n                </div>\r\n                <ul className={styled['nav-link']}>\r\n                    <li>\r\n                        <p>Home</p>\r\n                    </li>\r\n                    <li>\r\n                        <p>About</p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Work</p>\r\n                    </li>\r\n                    <li>\r\n                        <p>Project</p>\r\n                    </li>\r\n                </ul>\r\n                <div className={burgerClass} onClick={e => toggleNavbar(e)}  >\r\n                    <div className={styled['line1']}></div>\r\n                    <div className={styled['line2']}></div>\r\n                    <div className={styled['line3']}></div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport './App.css';\r\nimport NavBar from './components/nav-bar/nav-bar';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <NavBar></NavBar>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}